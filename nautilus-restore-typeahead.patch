Index: nautilus-46~beta/data/org.gnome.nautilus.gschema.xml
===================================================================
--- nautilus-46~beta.orig/data/org.gnome.nautilus.gschema.xml
+++ nautilus-46~beta/data/org.gnome.nautilus.gschema.xml
@@ -82,6 +82,11 @@
       <summary>Always use the location entry, instead of the pathbar</summary>
       <description>If set to true, Files will always use a textual input entry for the location toolbar, instead of the pathbar.</description>
     </key>
+    <key type="b" name="type-ahead-search">
+      <default>true</default>
+      <summary>Start searching on type ahead</summary>
+      <description>If set to true, typing on the files viewer will start searching. Otherwise it select first matching file.</description>
+    </key>
     <key name="recursive-search" enum="org.gnome.nautilus.SpeedTradeoff">
       <default>'local-only'</default>
       <summary>Where to perform recursive search</summary>
Index: nautilus-46~beta/src/nautilus-global-preferences.h
===================================================================
--- nautilus-46~beta.orig/src/nautilus-global-preferences.h
+++ nautilus-46~beta/src/nautilus-global-preferences.h
@@ -116,6 +116,7 @@ typedef enum
 
 /* Search behaviour */
 #define NAUTILUS_PREFERENCES_RECURSIVE_SEARCH "recursive-search"
+#define NAUTILUS_PREFERENCES_TYPE_AHEAD_SEARCH "type-ahead-search"
 
 /* Context menu options */
 #define NAUTILUS_PREFERENCES_SHOW_DELETE_PERMANENTLY "show-delete-permanently"
Index: nautilus-46~beta/src/nautilus-preferences-window.c
===================================================================
--- nautilus-46~beta.orig/src/nautilus-preferences-window.c
+++ nautilus-46~beta/src/nautilus-preferences-window.c
@@ -42,6 +42,8 @@
         "show_create_link_row"
 #define NAUTILUS_PREFERENCES_DIALOG_LIST_VIEW_USE_TREE_WIDGET                  \
         "use_tree_view_row"
+#define NAUTILUS_PREFERENCES_DIALOG_TYPE_AHEAD_WIDGET                          \
+        "type_ahead_search"
 
 /* combo preferences */
 #define NAUTILUS_PREFERENCES_DIALOG_OPEN_ACTION_COMBO                          \
@@ -361,6 +363,9 @@ nautilus_preferences_window_setup (GtkBu
     bind_builder_bool (builder, nautilus_preferences,
                        NAUTILUS_PREFERENCES_DIALOG_DELETE_PERMANENTLY_WIDGET,
                        NAUTILUS_PREFERENCES_SHOW_DELETE_PERMANENTLY);
+    bind_builder_bool (builder, nautilus_preferences,
+                       NAUTILUS_PREFERENCES_DIALOG_TYPE_AHEAD_WIDGET,
+                       NAUTILUS_PREFERENCES_TYPE_AHEAD_SEARCH);
 
     setup_detailed_date (builder);
 
Index: nautilus-46~beta/src/nautilus-query-editor.c
===================================================================
--- nautilus-46~beta.orig/src/nautilus-query-editor.c
+++ nautilus-46~beta/src/nautilus-query-editor.c
@@ -732,6 +732,12 @@ nautilus_query_editor_set_query (Nautilu
 
     g_return_if_fail (NAUTILUS_IS_QUERY_EDITOR (self));
 
+    /* Setting query to NULL causes reentry to set it to an empty query */
+    if (self->change_frozen) {
+        g_set_object (&self->query, query);
+        return;
+    }
+
     if (query != NULL)
     {
         text = nautilus_query_get_text (query);
Index: nautilus-46~beta/src/nautilus-window-slot.c
===================================================================
--- nautilus-46~beta.orig/src/nautilus-window-slot.c
+++ nautilus-46~beta/src/nautilus-window-slot.c
@@ -68,6 +68,9 @@ enum
     NUM_PROPERTIES
 };
 
+/* In type ahead mode, clear entry if it did not change for a while */
+#define CLEAR_QUERY_EDITOR_TIMEOUT 1000
+
 struct _NautilusWindowSlot
 {
     AdwBin parent_instance;
@@ -110,6 +113,7 @@ struct _NautilusWindowSlot
     /* Query editor */
     NautilusQueryEditor *query_editor;
     NautilusQuery *pending_search_query;
+    guint clear_query_editor_timeout_id;
 
     /* Banner */
     AdwBanner *banner;
@@ -168,6 +172,7 @@ static void nautilus_window_slot_set_loc
 static void nautilus_window_slot_set_viewed_file (NautilusWindowSlot *self,
                                                   NautilusFile       *file);
 static void update_search_information (NautilusWindowSlot *self);
+static GFile *nautilus_window_slot_get_current_location (NautilusWindowSlot *self);
 
 void
 free_navigation_state (gpointer data)
@@ -404,6 +409,48 @@ query_editor_focus_view_callback (Nautil
     }
 }
 
+static GFile *
+nautilus_window_slot_get_current_location(NautilusWindowSlot *self)
+{
+    if (self->pending_location != NULL)
+    {
+        return self->pending_location;
+    }
+
+    return self->location;
+}
+
+static gboolean
+type_ahead_search (void)
+{
+    return g_settings_get_boolean (nautilus_preferences, NAUTILUS_PREFERENCES_TYPE_AHEAD_SEARCH);
+}
+
+static gboolean
+clear_query_editor_timeout_callback (NautilusWindowSlot *self)
+{
+    nautilus_query_editor_set_query (self->query_editor, NULL);
+    self->clear_query_editor_timeout_id = 0;
+    return G_SOURCE_REMOVE;
+}
+
+typedef struct {
+    GQuark attribute;
+    gboolean directories_first;
+    gboolean reversed;
+} FileCompareForTypeAheadContext;
+
+static int
+file_compare_for_type_ahead (gconstpointer a, gconstpointer b, gpointer user_data)
+{
+    FileCompareForTypeAheadContext *ctx = user_data;
+    return nautilus_file_compare_for_sort_by_attribute_q(NAUTILUS_FILE (a),
+                                                         NAUTILUS_FILE (b),
+                                                         ctx->sort_attribute,
+                                                         ctx->directories_first,
+                                                         ctx->reversed);
+}
+
 static void
 query_editor_changed_callback (NautilusQueryEditor *editor,
                                NautilusQuery       *query,
@@ -414,9 +461,54 @@ query_editor_changed_callback (NautilusQ
 
     view = nautilus_window_slot_get_current_view (self);
 
-    /* Setting search query may cause the view to load a new location. */
-    nautilus_view_set_search_query (view, query);
-    nautilus_window_slot_set_location (self, nautilus_view_get_location (view));
+    if (nautilus_window_slot_get_search_visible (self))
+    {
+        /* Setting search query may cause the view to load a new location. */
+        nautilus_view_set_search_query (view, query);
+        nautilus_window_slot_set_location (self, nautilus_view_get_location (view));
+    }
+    else
+    {
+        /* Find all files with a display name that starts with the query, case insensitive. */
+        GFile *location = nautilus_window_slot_get_current_location (self);
+        g_autoptr (NautilusDirectory) directory = nautilus_directory_get (location);
+        const gchar *text = nautilus_query_get_text (query);
+        g_autofree gchar *text_casefold = g_utf8_casefold (text, -1);
+        g_autofree gchar *text_collate = g_utf8_collate_key_for_filename (text_casefold, -1);
+        gsize text_len = strlen (text);
+        g_autolist (NautilusFile) files = nautilus_directory_get_file_list (directory);
+        g_autolist (NautilusFile) matches = NULL;
+        GList *l;
+
+        for (l = files; l; l = l->next)
+        {
+            NautilusFile *file = NAUTILUS_FILE (l->data);
+            const gchar *name = nautilus_file_get_display_name(file);
+            g_autofree gchar *name_casefold = g_utf8_casefold(name, text_len);
+            g_autofree gchar *name_collate = g_utf8_collate_key_for_filename(name_casefold, -1);
+
+            if (g_str_equal (name_collate, text_collate))
+            {
+                matches = g_list_prepend (matches, nautilus_file_ref (file));
+            }
+        }
+
+        /* Select the first match */
+        if (matches != NULL)
+        {
+            FileCompareForTypeAheadContext ctx;
+            nautilus_files_view_get_sort_state (NAUTILUS_FILES_VIEW (view), &ctx.sort_attribute, &ctx.reversed, &ctx.directories_first);
+            matches = g_list_sort_with_data (matches, file_compare_for_type_ahead, &ctx);
+            g_autolist(NautilusFile) selection = g_list_prepend (NULL, g_object_ref (matches->data));
+            nautilus_view_set_selection (self->content_view, selection);
+        }
+
+        /* Reset timeout that clears type ahead query */
+        g_clear_handle_id (&self->clear_query_editor_timeout_id, g_source_remove);
+        self->clear_query_editor_timeout_id = g_timeout_add (CLEAR_QUERY_EDITOR_TIMEOUT,
+                                                             G_SOURCE_FUNC (clear_query_editor_timeout_callback),
+                                                             self);
+    }
 }
 
 static void
@@ -426,8 +518,6 @@ hide_query_editor (NautilusWindowSlot *s
 
     view = nautilus_window_slot_get_current_view (self);
 
-    g_signal_handlers_disconnect_by_data (self->query_editor, self);
-
     nautilus_query_editor_set_query (self->query_editor, NULL);
 
     if (nautilus_view_is_searching (view))
@@ -456,17 +546,6 @@ hide_query_editor (NautilusWindowSlot *s
     }
 }
 
-static GFile *
-nautilus_window_slot_get_current_location (NautilusWindowSlot *self)
-{
-    if (self->pending_location != NULL)
-    {
-        return self->pending_location;
-    }
-
-    return self->location;
-}
-
 static void
 show_query_editor (NautilusWindowSlot *self)
 {
@@ -491,15 +570,6 @@ show_query_editor (NautilusWindowSlot *s
     }
 
     gtk_widget_grab_focus (GTK_WIDGET (self->query_editor));
-
-    g_signal_connect (self->query_editor, "changed",
-                      G_CALLBACK (query_editor_changed_callback), self);
-    g_signal_connect (self->query_editor, "cancel",
-                      G_CALLBACK (query_editor_cancel_callback), self);
-    g_signal_connect (self->query_editor, "activated",
-                      G_CALLBACK (query_editor_activated_callback), self);
-    g_signal_connect (self->query_editor, "focus-view",
-                      G_CALLBACK (query_editor_focus_view_callback), self);
 }
 
 static void
@@ -613,7 +683,7 @@ nautilus_window_slot_handle_event (Nauti
                                                      state);
     }
 
-    if (retval)
+    if (retval && type_ahead_search ())
     {
         nautilus_window_slot_set_search_visible (self, TRUE);
     }
@@ -874,6 +944,15 @@ nautilus_window_slot_constructed (GObjec
     gtk_box_append (GTK_BOX (self->vbox), extras_vbox);
 
     self->query_editor = NAUTILUS_QUERY_EDITOR (nautilus_query_editor_new ());
+    g_signal_connect (self->query_editor, "changed",
+                      G_CALLBACK (query_editor_changed_callback), self);
+    g_signal_connect (self->query_editor, "cancel",
+                      G_CALLBACK (query_editor_cancel_callback), self);
+    g_signal_connect (self->query_editor, "activated",
+                      G_CALLBACK (query_editor_activated_callback), self);
+    g_signal_connect (self->query_editor, "focus-view",
+                      G_CALLBACK (query_editor_focus_view_callback), self);
+
     /* We want to keep alive the query editor betwen additions and removals on the
      * UI, specifically when the toolbar adds or removes it */
     g_object_ref_sink (self->query_editor);
@@ -1992,6 +2071,9 @@ setup_view (NautilusWindowSlot *self,
 
     nautilus_window_slot_disconnect_content_view (self);
 
+    nautilus_query_editor_set_query (self->query_editor, NULL);
+    g_clear_handle_id (&self->clear_query_editor_timeout_id, g_source_remove);
+
     self->new_content_view = view;
 
     nautilus_window_slot_connect_new_content_view (self);
@@ -2557,14 +2639,6 @@ view_started_loading (NautilusWindowSlot
         nautilus_window_slot_set_allow_stop (self, TRUE);
     }
 
-    /* Only grab focus if the menu isn't showing. Otherwise the menu disappears
-     * e.g. when the user toggles Show Hidden Files
-     */
-    if (!nautilus_window_is_menu_visible (self->window))
-    {
-        gtk_widget_grab_focus (GTK_WIDGET (self->window));
-    }
-
     nautilus_window_slot_set_loading (self, TRUE);
 }
 
@@ -2583,6 +2657,14 @@ view_ended_loading (NautilusWindowSlot *
         self->needs_reload = FALSE;
     }
 
+    /* Only grab focus if the menu isn't showing. Otherwise the menu disappears
+     * e.g. when the user toggles Show Hidden Files
+     */
+    if (!nautilus_window_is_menu_visible (self->window))
+    {
+        gtk_widget_grab_focus (GTK_WIDGET (self->window));
+    }
+
     nautilus_window_slot_set_allow_stop (self, FALSE);
 
     nautilus_window_slot_set_loading (self, FALSE);
Index: nautilus-46~beta/src/resources/ui/nautilus-preferences-window.ui
===================================================================
--- nautilus-46~beta.orig/src/resources/ui/nautilus-preferences-window.ui
+++ nautilus-46~beta/src/resources/ui/nautilus-preferences-window.ui
@@ -37,6 +37,21 @@
                 <property name="visible">True</property>
               </object>
             </child>
+            <child>
+              <object class="AdwActionRow">
+                <property name="activatable_widget">type_ahead_search</property>
+                <property name="subtitle_lines">0</property>
+                <property name="title" translatable="yes">Search on type ahead</property>
+                <property name="title_lines">0</property>
+                <property name="use_underline">True</property>
+                <property name="visible">True</property>
+                <child>
+                  <object class="GtkSwitch" id="type_ahead_search">
+                    <property name="valign">center</property>
+                  </object>
+                </child>
+              </object>
+            </child>
           </object>
         </child>
         <child>
